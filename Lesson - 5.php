<!DOCTYPE html>
<html lang="ru">
<head>
	<title>Задачи на математические функции PHP</title>
	<meta charset="utf-8">
</head>
<body>

<?php

	// объявляем переменные "$a" и "$b", в которые записываем числовые значения "10" и "3" соответственно, после чего, используя знак "%", выводим в браузер остаток от деления значений указанных переменных (МОЙ СПОСОБ (АНАЛОГИЧЕН СПОСОБУ АВТОРА)):
	$a = 10;
	$b = 3;
	echo $a % $b;
	
	// объявляем переменные "$a" и "$b", в которые записываем числовые значения "10" и "3" соответственно, затем объявляем условие по конструкции "if-else", по которому, если остаток от деления переменной "$a" на переменную "$b" соответствует числовому значению "0", то в браузер выводим сообщение "Делится без остатка с результатом: " и указываем результат деления значения переменной "$a" на значение переменной "$b", иначе - "Делится с остатком: " и указываем остаток деления значения переменной "$a" на значение переменной "$b" (МОЙ СПОСОБ (С НЕБОЛЬШОЙ ИМПРОВИЗАЦИЕЙ)): 
	$a = 10;
	$b = 3;
	if ($a % $b == 0) {
		echo "Делится без остатка с результатом: ".$a/$b;
	} else {
		echo "Делится с остатком: ".$a%$b;
	}
	
	// объявляем переменные "$a", "$b" и "$c", в которые записываем числовые значения "10", "3" и результат деления значения первой переменной на значение второй переменной соответственно, затем объявляем условие по конструкции "if-else", по которому, если значение переменной "$c" соответствует числовому значению "0", то в браузер выводим сообщение 'Делится, результат деления: ' и указываем результат деления значения переменной "$a" на значение переменной "$b", иначе - "Делится с остатком!" и указываем значение переменной "$c" (СПОСОБ АВТОРА):
	$a = 10;
	$b = 3;
	$c = $a % $b;
	if ($c == 0) {
		echo 'Делится, результат деления: ' . ($a / $b);
	} else {
		echo 'Делится с остатком '.$c;
	}
	
	// объявляем переменную "$st", в которую записываем арифметическую операцию возведения числа "2" в 10-ю степень с использованием двойного знака "*" (МОЙ СПОСОБ):
	$st = 2 ** 10;
	echo $st;
	
	// - (СПОСОБ АВТОРА):
	$st = pow(2, 10);
	echo $st;
	
	// рассчитываем квадратный корень числа "245" (МОЙ СПОСОБ):
	echo sqrt(245);
	
	// - (СПОСОБ АВТОРА):
	$sqrt = sqrt(245);
	echo $sqrt;
	
	// объявляем переменные "$arr" и "$sum", в которые записываем числовой массив "[4, 2, 5, 19, 13, 0, 10]" и числовое значение "0" соответственно, после чего циклом "foreach" проходим по данному массиву (при этом в теле цикла мы увеличиваем значение переменной "$sum" на каждой итерации таким образом, оно у нас увеличивалось на значение очередного элемента массива, возведённое в квадрат) и выводим на экран квадратный корень полученного результата, используя встроенную функцию "sqrt()"(МОЙ СПОСОБ):
	$arr = [4, 2, 5, 19, 13, 0, 10];
	$sum = 0;
	foreach ($arr as $v) {
		$sum += ($v**2);
	}
	echo sqrt($sum);
	
	// - (СПОСОБ АВТОРА):
	$arr = [4, 2, 5, 19, 13, 0, 10];
	$sum = 0;
	foreach ($arr as $elem) {
		$sum += $elem * $elem;
	}
	$result = sqrt($sum);
	echo $result;
	
	// объявляем переменные "$a", "$b", "$c" и "$d", в которые записываем значение квадратного корня числа "379", встроенную функцию обычного математического округления значения переменной "$a", такую же до десятых частей и такую же до сотых частей соответственно, после чего выводим все полученные результаты в браузер(МОЙ СПОСОБ):
	$a = sqrt(379);
	$b = round($a);
	$c = round($a, 1);
	$d = round($a, 2);
	echo "$a<br>$b<br>$c<br>$d";
	
	// - (СПОСОБ АВТОРА):
	$sqrt = sqrt(379);
	echo round($sqrt); //округление до целых
	echo round($sqrt, 1); //округление до десятых
	echo round($sqrt, 2); //округление до сотых
	
	// объявляем переменные "$a", "$b", "$c" и "$arr", в которые записываем значение квадратного корня числа "587", встроенную функцию округления значения переменной "$a" в большую сторону, такую же - в меньшую сторону и ассоциативный массив со строковыми ключами 'floor' (со значением, соответствующим значению переменной "$c") и 'ceil' (со значением, соответствующим значению переменной "$b") соответственно, после чего выводим все полученные результаты в браузер с помощью встроенной функции "print_r()"(МОЙ СПОСОБ):
	$a = sqrt(587);
	$b = ceil($a);
	$c = floor($a);
	$arr = ['floor' => $c, 'ceil' => $b];
	print_r($arr);
	
	// - (СПОСОБ АВТОРА):
	$sqrt = sqrt(587);
	$arr = ['floor'=>floor($sqrt), 'ceil'=>ceil($sqrt)];
	var_dump($arr);
	
	// выводим в браузер минимальное и максимальное значения из имеющихся в скобках с помощью встроенных функций "min()" и "max()" соответственно (МОЙ СПОСОБ):
	echo min(4, -2, 5, 19, -130, 0, 10);
	echo "<br>";
	echo max(4, -2, 5, 19, -130, 0, 10);
	
	// - (СПОСОБ АВТОРА):
	$arr = [4, -2, 5, 19, -130, 0, 10];
	echo max($arr); //максимальное значение
	echo min($arr); //минимальное значение
	
	// выводим в браузер случайные числовые значения в диапазоне от "1" до "100" с помощью соответствующей встроенной функции "mt_rand()" (МОЙ СПОСОБ (АНАЛОГИЧЕН СПОСОБУ АВТОРА)): 
	echo mt_rand(1, 100);
	
	// объявляем переменную "$arr", в которую записываем пустой массив, затем проходим циклом "for" по массиву, присваивая ему на каждой итерации случайное число в диапазоне от "1" до "100", после чего конечный массив выводим в браузер с помощью встроенной функции "var_dump()" (СПОСОБ АВТОРА): 
	$arr = [];
	for ($i = 1; $i <= 10; $i++) {
		$arr[] = mt_rand(1, 100);
	}
	var_dump($arr);
	
	// объявляем переменные "$a", "$b", "$c" и "$d", в которые записываем числовые значения "2", "5", "7" и "4" соответственно, после чего, применяя встроенную функцию "abs()", выводим в браузер модули разностей переменных (сначала "$a" и "$b", затем "$c" и "$d") (МОЙ СПОСОБ (С НЕБОЛЬШОЙ ИМПРОВИЗАЦИЕЙ)): 
	$a = 2;
	$b = 5;
	$c = 7; 
	$d = 4;
	echo abs($a-$b);
	echo "<br>";
	echo abs($c-$d);
	
	// - (СПОСОБ АВТОРА):
	$a = 20;
	$b = 24;
	echo abs($a -$b);
	
	// объявляем переменные "$arr" и "$arr_new", в которые записываем числовой массив "[1, 2, -1, -2, 3, -3]" и пустой массив соответственно, затем проходим циклом "foreach" по массиву "$arr" для извлечения всех его элементов, а в теле этого массива присваиваем массиву "$arr_new" модуль каждого элемента массива "$arr" на каждой итерации (МОЙ СПОСОБ):
	$arr = [1, 2, -1, -2, 3, -3];
	$arr_new = [];
	foreach ($arr as $v) {
		$arr_new[] = abs($v);
	}
	echo "<pre>";
	print_r($arr_new);
	echo "</pre>";
	
	// - (СПОСОБ АВТОРА):
	$result = [];
	$arr = [1, 2, -1, -2, 3, -3];
	foreach ($arr as $elem) {
		$result[] = abs($elem);
	}
	var_dump($result);
	
	// объявляем переменные "$arr" и "$num", в которые записываем пустой массив и числовое значение "30", затем запускаем цикл "for" (по которому значение первичного счётчика - это числовое значение "1", а конечного - числовое значение переменной "$num"), в теле которого объявляем следующее условие: если значение переменной "$num" (на каждой итерации) делится на счётчик цикла без остатка, то пустому массиву "$arr" присваиваем этот счётчик, после чего с помощью встроенной функции "var_dump()" выводим в браузер конечный массив "$arr" (СПОСОБ АВТОРА):
	$arr = [];
	$num = 30;
	for ($i = 1; $i <= $num; $i++) {
		if ($num % $i == 0) {
			$arr[] = $i;
		}
	}
	var_dump($arr);
	
	// объявляем переменные "$arr", "$sum" и "$i", в которые записываем числовой массив "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", числовое значение "0" и числовое значение "0" соответственно, затем запускаем цикл "foreach", в теле которого инкрементируем переменную "$i" (для подсчёта числа первых элементов массива согласно условию задачи), а значение переменной "$sum" при каждой итерации увеличиваем на число, соответствующее каждому элементу массива, затем объявляем следующее условие: если значение переменной "$sum" (на каждой итерации) больше числового значения "10", то мы обрываем этот цикл, после чего выводим в браузер значение переменной "$i", что является показателем количества первых элементов массива, которые необходимо сложить для получения числа больше "10" (СПОСОБ АВТОРА):
	$arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
	$sum = 0;
	$i = 0;
	foreach ($arr as $elem) {
		$i++; //считает количество элементов
		$sum += $elem;
		if ($sum > 10) {
			break; //выйдем из цикла - цель достигнута
		}
	}
	echo $i;
	
	// объявляем переменные "$box" и "$wall", которым присваиваем значения "1.5" и "20" соответственно, после чего выводим в браузер результат деления второй переменной на первую, округлённую в меньшую сторону:
	$box = 1.5;
	$wall = 20;
	echo floor($wall/$box);
	
?>

</body>
</html>